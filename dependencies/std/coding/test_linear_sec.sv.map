{"version":3,"file":"test_linear_sec.sv.map","sources":["../../../../../../.cache/veryl/std/b51c3032991a4f6da9284361e5cbde9e2fb8e28c254d24ccfb8b0ef366e9eb63/coding/test_linear_sec.veryl"],"names":["","`ifdef __veryl_test_test_axi_test_formal_sec__","\nmodule test_linear_sec\n#(\n    parameter P = 9,\n    localparam N = (1 << P) - 1 - P,\n    localparam K = N + P\n)\n(\n    input i_clk,\n    input  logic [N-1:0] i_word,\n    input logic [K-1:0] i_err\n);\n\n`ifdef FORMAL\ndefault clocking @(posedge i_clk);\nendclocking\n\ndefault disable iff (1'b0);\n\nas_onehot0: assume property ($onehot0(i_err));\n\nlogic [K-1:0] codeword;\nlogic [K-1:0] perturbed_codeword;\nlogic [N-1:0] word;\nlogic corrected;\n\nstd_linear_sec_encoder #(.P(P)) u_enc (.*, .o_codeword(codeword));\nassign perturbed_codeword = codeword ^ i_err;\nstd_linear_sec_decoder #(.P(P)) u_dec (\n    .i_codeword(perturbed_codeword), .o_word(word), .o_corrected(corrected));\n\nast_correct: assert property (word == i_word);\nast_error: assert property (corrected == $onehot(i_err));\n`else\n  initial begin\n    $display(\"Skipping formal verification\");\n    $finish;\n  end\n`endif\n\n\n\nendmodule"],"mappings":"AAAAA,AAAAC;;;;;;;;;AACiBC"}