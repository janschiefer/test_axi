//Variant of AXI interface using proto packages

pub proto package axi_prototype {
    const AXI_VERSION     : u32;
    const ADDRESS_WIDTH   : u32;
    const DATA_WIDTH_BYTES: u32;
    const NUM_BURSTS_LEN  : u32;
    const LOCK_LEN        : u32;
    const ID_LENGTH       : u32;
    const AWUSER_LENGTH   : u32;
    const WUSER_LENGTH    : u32;
    const BUSER_LENGTH    : u32;
    const ARUSER_LENGTH   : u32;
    const RUSER_LENGTH    : u32;

    type addr_t      ;
    type data_t      ;
    type strb_t      ;
    type num_bursts_t;
    type lock_t      ;
    type id_t        ;
    type awuser_t    ;
    type wuser_t     ;
    type buser_t     ;
    type aruser_t    ;
    type ruser_t     ;

}

pub package axi4_pkg::<ADDR_W: const, DATA_W_BYTES: const, ID_W: const, AWUSER_W: const, WUSER_W: const, BUSER_W: const, ARUSER_W: const, RUSER_W: const> for axi_prototype {
    const AXI_VERSION     : u32 = 4;
    const ADDRESS_WIDTH   : u32 = ADDR_W;
    const DATA_WIDTH_BYTES: u32 = DATA_W_BYTES;
    const NUM_BURSTS_LEN  : u32 = 8;
    const LOCK_LEN        : u32 = 1;
    const ID_LENGTH       : u32 = ID_W;
    const AWUSER_LENGTH   : u32 = AWUSER_W;
    const WUSER_LENGTH    : u32 = WUSER_W;
    const BUSER_LENGTH    : u32 = BUSER_W;
    const ARUSER_LENGTH   : u32 = ARUSER_W;
    const RUSER_LENGTH    : u32 = RUSER_W;

    type addr_t       = logic<ADDRESS_WIDTH>         ;
    type data_t       = logic<(DATA_WIDTH_BYTES * 8)>;
    type strb_t       = logic<DATA_WIDTH_BYTES>      ;
    type num_bursts_t = logic<NUM_BURSTS_LEN>        ;
    type lock_t       = logic<LOCK_LEN>              ;
    type id_t         = logic<ID_LENGTH>             ;
    type awuser_t     = logic<AWUSER_LENGTH>         ;
    type wuser_t      = logic<WUSER_LENGTH>          ;
    type buser_t      = logic<BUSER_LENGTH>          ;
    type aruser_t     = logic<ARUSER_LENGTH>         ;
    type ruser_t      = logic<RUSER_LENGTH>          ;
}

pub package axi3_pkg::<ADDR_W: const, DATA_W_BYTES: const, ID_W: const> for axi_prototype {
    const AXI_VERSION     : u32 = 3;
    const ADDRESS_WIDTH   : u32 = ADDR_W;
    const DATA_WIDTH_BYTES: u32 = DATA_W_BYTES;
    const NUM_BURSTS_LEN  : u32 = 4;
    const LOCK_LEN        : u32 = 2;
    const ID_LENGTH       : u32 = ID_W;
    const AWUSER_LENGTH   : u32 = 0; //Unused in AXI 3
    const WUSER_LENGTH    : u32 = 1; //Unused in AXI 3
    const BUSER_LENGTH    : u32 = 1; //Unused in AXI 3
    const ARUSER_LENGTH   : u32 = 1; //Unused in AXI 3
    const RUSER_LENGTH    : u32 = 1; //Unused in AXI 3

    type addr_t       = logic<ADDRESS_WIDTH>         ;
    type data_t       = logic<(DATA_WIDTH_BYTES * 8)>;
    type strb_t       = logic<DATA_WIDTH_BYTES>      ;
    type num_bursts_t = logic<NUM_BURSTS_LEN>        ;
    type lock_t       = logic<LOCK_LEN>              ;
    type id_t         = logic<ID_LENGTH>             ;
    type awuser_t     = logic<AWUSER_LENGTH>         ;
    type wuser_t      = logic<WUSER_LENGTH>          ;
    type buser_t      = logic<BUSER_LENGTH>          ;
    type aruser_t     = logic<ARUSER_LENGTH>         ;
    type ruser_t      = logic<RUSER_LENGTH>          ;
}


/// AXI3 / AXI4 bus interface
pub interface axi_if::<PKG: axi_prototype> {

    import PKG::*;

    ///Bus clock and reset
    var ACLK   : clock_posedge ;
    var ARESETN: reset_sync_low;

    ///Write address channel
    var AWVALID : logic          ;
    var AWREADY : logic          ;
    var AWADDR  : addr_t         ;
    var AWSIZE  : logic       <3>;
    var AWBURST : logic       <2>;
    var AWCACHE : logic       <4>;
    var AWPROT  : logic       <3>;
    var AWID    : id_t           ;
    var AWLEN   : num_bursts_t   ; //AXI3: 4 bits, AXI4: 8 bits
    var AWLOCK  : lock_t         ; //AXI3: 2 bits, AXI4: 1 bit
    var AWQOS   : logic       <4>; //Only AXI4
    var AWREGION: logic       <4>; //Only AXI4
    var AWUSER  : awuser_t       ; //Only AXI4

    ///Write data channel
    var WVALID: logic  ;
    var WREADY: logic  ;
    var WLAST : logic  ;
    var WDATA : data_t ;
    var WSTRB : strb_t ;
    var WID   : id_t   ; //Only AXI3
    var WUSER : wuser_t; //Only AXI4

    ///Write response channel
    var BVALID: logic     ;
    var BREADY: logic     ;
    var BRESP : logic  <2>;
    var BID   : id_t      ;
    var BUSER : buser_t   ; //Only AXI4

    ///Read address channel
    var ARVALID : logic          ;
    var ARREADY : logic          ;
    var ARADDR  : addr_t         ;
    var ARSIZE  : logic       <3>;
    var ARBURST : logic       <2>;
    var ARCACHE : logic       <4>;
    var ARPROT  : logic       <3>;
    var ARID    : id_t           ;
    var ARLEN   : num_bursts_t   ; //AXI3: 4 bits, AXI4: 8 bits
    var ARLOCK  : lock_t         ; //AXI3: 2 bits, AXI4: 1 bit
    var ARQOS   : logic       <4>; //Only AXI4
    var ARREGION: logic       <4>; //Only AXI4
    var ARUSER  : aruser_t       ; //Only AXI4

    ///Read data channel
    var RVALID: logic     ;
    var RREADY: logic     ;
    var RLAST : logic     ;
    var RDATA : data_t    ;
    var RRESP : logic  <2>;
    var RID   : id_t      ;
    var RUSER : ruser_t   ; //Only AXI4

    modport master {
        ACLK   : input,
        ARESETN: input,

        AWVALID : output,
        AWREADY : input ,
        AWADDR  : output,
        AWSIZE  : output,
        AWBURST : output,
        AWCACHE : output,
        AWPROT  : output,
        AWID    : output,
        AWLEN   : output,
        AWLOCK  : output,
        AWQOS   : output,
        AWREGION: output,
        AWUSER  : output,

        WVALID: output,
        WREADY: input ,
        WLAST : output,
        WDATA : output,
        WSTRB : output,
        WID   : output,
        WUSER : output,

        BVALID: input ,
        BREADY: output,
        BRESP : input ,
        BID   : input ,
        BUSER : input ,

        ARVALID : output,
        ARREADY : input ,
        ARADDR  : output,
        ARSIZE  : output,
        ARBURST : output,
        ARCACHE : output,
        ARPROT  : output,
        ARID    : output,
        ARLEN   : output,
        ARLOCK  : output,
        ARQOS   : output,
        ARREGION: output,
        ARUSER  : output,

        RVALID: input ,
        RREADY: output,
        RLAST : input ,
        RDATA : input ,
        RRESP : input ,
        RID   : input ,
        RUSER : input ,

    }

    modport slave {
        ACLK   : input,
        ARESETN: input,

        ..converse(master)
    }

    modport master_interconnect {
        ACLK   : output,
        ARESETN: output,

        ..same(master)
    }

    modport slave_interconnect {
        ACLK   : output,
        ARESETN: output,

        ..same(slave)
    }
    modport monitor {

        ..input
    }
}
