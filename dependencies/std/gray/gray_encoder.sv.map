{"version":3,"file":"gray_encoder.sv.map","sources":["../../../../../../.cache/veryl/std/b51c3032991a4f6da9284361e5cbde9e2fb8e28c254d24ccfb8b0ef366e9eb63/gray/gray_encoder.veryl"],"names":["","module","gray_encoder","#","(","parameter","int unsigned","WIDTH","=","32",")","input","logic","[","]","i_bin",",","output","o_gray",";","always_comb","^",">>","1","endmodule","`ifdef __veryl_test_test_axi_test_gray__","\nmodule test_gray;\n  localparam WIDTH = 16;\n  logic [WIDTH-1:0] i_bin;\n  logic [WIDTH-1:0] o_gray;\n  logic [WIDTH-1:0] o_bin;\n  logic [WIDTH-1:0] g_bin;\n\n  always_comb begin\n    g_bin = '0;\n    for (int i = 0; i < WIDTH; ++i) begin\n      g_bin ^= o_gray >> i;\n    end\n  end\n\n  std_gray_encoder #(WIDTH) dut2(.i_bin, .o_gray);\n  std_gray_decoder #(WIDTH) dut1(.i_gray(o_gray), .o_bin);\n\n  initial begin\n    for (longint i = 0; i < (1 << WIDTH); ++i) begin\n      i_bin = i;\n      #1;\n      assert(o_bin == g_bin) else $error(\"error detected\");\n      assert(i_bin == o_bin) else $error(\"error detected\");\n      #1;\n    end\n  end\n\nendmodule"],"mappings":"AAAAA;;;AAGIC,WAAOC,aAAaC,CAACC;;IAErBC,UAAaC,aAAPC,MAAWC,EAAEC,EAAET;AACzBU,EAAEN;;IAESO,UAAMC,MAAKC,CAACN,SAAKO,EAAxBC,KAAyBC;;IAEjBC,WAAOL,MAAKC,CAACN,SAAKO,EAA1BI,MAA2BlB;AAC/BU,CAAES;IACEC,YAAOF,OAAOV,EAAEO,MAAMM,EAAEjB,CAACW,MAAMO,GAAGC,CAACb,CAACS;AACxCK;;AAEAC;;;;;;;;;AACiBC"}