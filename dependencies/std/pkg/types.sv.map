{"version":3,"file":"types.sv.map","sources":["../../../../../../.cache/veryl/std/b51c3032991a4f6da9284361e5cbde9e2fb8e28c254d24ccfb8b0ef366e9eb63/pkg/types.veryl"],"names":["","package","types",";","typedef","logic","[","8","]","ul8","16","ul16","32","ul32","64","ul64","il8","il16","il32","il64","bit","ub8","ub16","ub32","ub64","ib8","ib16","ib32","ib64","endpackage","`ifdef __veryl_test_test_axi_test_std_types_pkg__","\nmodule test_std_types_pkg;\n    std_types::ul8  a;\n    std_types::ul16 b;\n    std_types::ul32 c;\n    std_types::ul64 d;\n\n    std_types::il8  e;\n    std_types::il16 f;\n    std_types::il32 g;\n    std_types::il64 h;\n\n    std_types::ub8  i;\n    std_types::ub16 j;\n    std_types::ub32 k;\n    std_types::ub64 l;\n\n    std_types::ib8  m;\n    std_types::ib16 n;\n    std_types::ib32 o;\n    std_types::ib64 p;\n\n    `define test_unsigned_logic(VARIABLE, WIDTH) \\\n    begin \\\n        assert($bits(VARIABLE) == WIDTH) \\\n        else $error(\"error detected\"); \\\n        VARIABLE = '0; \\\n        VARIABLE[WIDTH-1] = '1; \\\n        assert(VARIABLE > 0) \\\n        else $error(\"error detected\"); \\\n        `ifndef VERILATOR \\\n            VARIABLE = 'x; \\\n            assert(VARIABLE === 'x) \\\n            else $error(\"error detected\"); \\\n        `endif \\\n    end\n\n    `define test_signed_logic(VARIABLE, WIDTH) \\\n    begin \\\n        assert($bits(VARIABLE) == WIDTH) \\\n        else $error(\"error detected\"); \\\n        VARIABLE = '0; \\\n        VARIABLE[WIDTH-1] = '1; \\\n        assert(VARIABLE < 0) \\\n        else $error(\"error detected\"); \\\n        `ifndef VERILATOR \\\n            VARIABLE = 'x; \\\n            assert(VARIABLE === 'x) \\\n            else $error(\"error detected\"); \\\n        `endif \\\n    end\n\n    `define test_unsigned_bit(VARIABLE, WIDTH) \\\n    begin \\\n        assert($bits(VARIABLE) == WIDTH) \\\n        else $error(\"error detected\"); \\\n        VARIABLE = '0; \\\n        VARIABLE[WIDTH-1] = '1; \\\n        assert(VARIABLE > 0) \\\n        else $error(\"error detected\"); \\\n        `ifndef VERILATOR \\\n            VARIABLE = 'x; \\\n            assert((!$isunknown(VARIABLE)) && (VARIABLE == '0)) \\\n            else $error(\"error detected\"); \\\n        `endif \\\n    end\n\n    `define test_signed_bit(VARIABLE, WIDTH) \\\n    begin \\\n        assert($bits(VARIABLE) == WIDTH) \\\n        else $error(\"error detected\"); \\\n        VARIABLE = '0; \\\n        VARIABLE[WIDTH-1] = '1; \\\n        assert(VARIABLE < 0) \\\n        else $error(\"error detected\"); \\\n        `ifndef VERILATOR \\\n            VARIABLE = 'x; \\\n            assert((!$isunknown(VARIABLE)) && (VARIABLE == '0)) \\\n            else $error(\"error detected\"); \\\n        `endif \\\n    end\n\n    initial begin\n        `test_unsigned_logic(a, 8)\n        `test_unsigned_logic(b, 16)\n        `test_unsigned_logic(c, 32)\n        `test_unsigned_logic(d, 64)\n\n        `test_signed_logic(e, 8)\n        `test_signed_logic(f, 16)\n        `test_signed_logic(g, 32)\n        `test_signed_logic(h, 64)\n\n        `test_unsigned_bit(i, 8)\n        `test_unsigned_bit(j, 16)\n        `test_unsigned_bit(k, 32)\n        `test_unsigned_bit(l, 64)\n\n        `test_signed_bit(m, 8)\n        `test_signed_bit(n, 16)\n        `test_signed_bit(o, 32)\n        `test_signed_bit(p, 64)\n\n        $finish;\n    end\nendmodule"],"mappings":"AAAAA;AACIC,YAAQC,KAAMC;IACdC,QAAYC,MAAKC,CAACC,KAACC,GAAdC,IAAgBN;IACrBC,QAAYC,MAAKC,CAACI,MAAEF,EAAfG,IAAgBR;IACrBC,QAAYC,MAAKC,CAACM,MAAEJ,EAAfK,IAAgBV;IACrBC,QAAYC,MAAKC,CAACQ,MAAEN,EAAfO,IAAgBZ;;IAErBC,QAAmBC,aAAKC,CAACC,KAACC,GAArBQ,IAAuBb;IAC5BC,QAAmBC,aAAKC,CAACI,MAAEF,EAAtBS,IAAuBd;IAC5BC,QAAmBC,aAAKC,CAACM,MAAEJ,EAAtBU,IAAuBf;IAC5BC,QAAmBC,aAAKC,CAACQ,MAAEN,EAAtBW,IAAuBhB;;IAE5BC,QAAYgB,IAAGd,CAACC,KAACC,GAAZa,IAAclB;IACnBC,QAAYgB,IAAGd,CAACI,MAAEF,EAAbc,IAAcnB;IACnBC,QAAYgB,IAAGd,CAACM,MAAEJ,EAAbe,IAAcpB;IACnBC,QAAYgB,IAAGd,CAACQ,MAAEN,EAAbgB,IAAcrB;;IAEnBC,QAAmBgB,WAAGd,CAACC,KAACC,GAAnBiB,IAAqBtB;IAC1BC,QAAmBgB,WAAGd,CAACI,MAAEF,EAApBkB,IAAqBvB;IAC1BC,QAAmBgB,WAAGd,CAACM,MAAEJ,EAApBmB,IAAqBxB;IAC1BC,QAAmBgB,WAAGd,CAACQ,MAAEN,EAApBoB,IAAqBzB;AAC9B0B;;AAEAC;;;;;;;;;AACiBC"}