{"version":3,"file":"test_selector.sv.map","sources":["../../../../../../.cache/veryl/std/b51c3032991a4f6da9284361e5cbde9e2fb8e28c254d24ccfb8b0ef366e9eb63/selector/test_selector.veryl"],"names":["","`ifdef __veryl_test_test_axi_test_binary_mux__","\nmodule test_binary_mux;\n  import std_selector_pkg::*;\n\n  logic [3:0]       select;\n  logic [15:0][3:0] input_data;\n  logic [3:0]       mux_data;\n  logic [15:0][3:0] output_data;\n\n  std_mux #(\n    .WIDTH    (4                    ),\n    .ENTRIES  (16                   ),\n    .KIND     (selector_kind_BINARY )\n  ) u_mux (\n    .i_select (select     ),\n    .i_data   (input_data ),\n    .o_data   (mux_data   )\n  );\n\n  std_demux #(\n    .WIDTH    (4                    ),\n    .ENTRIES  (16                   ),\n    .KIND     (selector_kind_BINARY )\n  ) u_demux (\n    .i_select (select       ),\n    .i_data   (mux_data     ),\n    .o_data   (output_data  )\n  );\n\n  initial begin\n    for (int i = 0;i < 16;++i) begin\n      input_data[i] = i;\n    end\n\n    for (int i = 0;i < 16;++i) begin\n      select  = i;\n      #1;\n      for (int j = 0;j < 16;++j) begin\n        logic [3:0] expected_data;\n\n        if (j == i) begin\n          expected_data = input_data[j];\n        end else begin\n          expected_data = 0;\n        end\n\n        assert (output_data[j] == expected_data)\n        else $error(\"output_data[%0d]: %h expected_data: %h\", j, output_data[j], expected_data);\n      end\n    end\n\n    $finish;\n  end\nendmodule","`ifdef __veryl_test_test_axi_test_binary_vector__","\nmodule test_vector_mux;\n  import std_selector_pkg::*;\n\n  logic [15:0]      select_mux;\n  logic [15:0]      select_demux;\n  logic [15:0][3:0] input_data;\n  logic [3:0]       mux_data;\n  logic [15:0][3:0] output_data;\n\n  std_mux #(\n    .WIDTH    (4                    ),\n    .ENTRIES  (16                   ),\n    .KIND     (selector_kind_VECTOR )\n  ) u_mux (\n    .i_select (select_mux ),\n    .i_data   (input_data ),\n    .o_data   (mux_data   )\n  );\n\n  std_demux #(\n    .WIDTH    (4                    ),\n    .ENTRIES  (16                   ),\n    .KIND     (selector_kind_VECTOR )\n  ) u_demux (\n    .i_select (select_demux ),\n    .i_data   (mux_data     ),\n    .o_data   (output_data  )\n  );\n\n  initial begin\n    for (int i = 0;i < 16;++i) begin\n      input_data[i] = i;\n    end\n\n    select_mux  = '1;\n    for (int i = 0;i < 16;++i) begin\n      select_demux    = '0;\n      select_demux[i] = '1;\n\n      #1;\n      for (int j = 0;j < 16;++j) begin\n        logic [3:0] expected_data;\n\n        if (j == i) begin\n          expected_data = input_data[j];\n        end else begin\n          expected_data = 0;\n        end\n\n        assert (output_data[j] == expected_data)\n        else $error(\"output_data[%0d]: %h expected_data: %h\", j, output_data[j], expected_data);\n      end\n\n      select_mux[i] = '0;\n    end\n\n    $finish;\n  end\nendmodule","`ifdef __veryl_test_test_axi_test_onehot_mux__","\nmodule test_onehot_mux;\n  import std_selector_pkg::*;\n\n  logic [15:0]      select;\n  logic [15:0][3:0] input_data;\n  logic [3:0]       mux_data;\n  logic [15:0][3:0] output_data;\n\n  std_mux #(\n    .WIDTH    (4                    ),\n    .ENTRIES  (16                   ),\n    .KIND     (selector_kind_ONEHOT )\n  ) u_mux (\n    .i_select (select     ),\n    .i_data   (input_data ),\n    .o_data   (mux_data   )\n  );\n\n  std_demux #(\n    .WIDTH    (4                    ),\n    .ENTRIES  (16                   ),\n    .KIND     (selector_kind_ONEHOT )\n  ) u_demux (\n    .i_select (select       ),\n    .i_data   (mux_data     ),\n    .o_data   (output_data  )\n  );\n\n  initial begin\n    for (int i = 0;i < 16;++i) begin\n      input_data[i] = i;\n    end\n\n    for (int i = 0;i < 16;++i) begin\n      select    = '0;\n      select[i] = '1;\n\n      #1;\n      for (int j = 0;j < 16;++j) begin\n        logic [3:0] expected_data;\n\n        if (j == i) begin\n          expected_data = input_data[j];\n        end else begin\n          expected_data = 0;\n        end\n\n        assert (output_data[j] == expected_data)\n        else $error(\"output_data[%0d]: %h expected_data: %h\", j, output_data[j], expected_data);\n      end\n    end\n\n    $finish;\n  end\nendmodule"],"mappings":"AAAAA,AAAAC;;;;;;;;;AACiBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwDjBC;;;;;;;;;AACiBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8DjBC;;;;;;;;;AACiBC"}